pipeline{
    agent any
    stages{

        stage('git checkout'){

            steps{

                git branch: 'main', url: 'https://github.com/vaibhav9191/demo-counter.git'

            }


        }
        stage('unit testing'){

            steps{

                script{

                    sh 'mvn test'
    
                }

            }           

        }
        stage('integration testing'){
            steps{
                script{

                    sh 'mvn verify -DskipUnitTests'
                }
            }


        }

        stage('maven Build'){

            steps{

                script{

                    sh 'mvn clean install'
                }
            }
        }
        stage('sonarqube analysis'){

            steps{

                script{
                    withSonarQubeEnv(credentialsId: 'sonartok') {
                        sh 'mvn clean package sonar:sonar'
                 
                    }
                
                }
            }
        }
        stage('Quality Gate Analysis'){
            steps{

                script{

                    waitForQualityGate abortPipeline: false, credentialsId: 'sonartok'

                }
            }


        }
        stage('Upload Jar to nexus'){

            steps{
                script{
                   //using pilepine utility script plugin documention 
                    def readPomVersion = readMavenPom file: 'pom.xml'
                    //if version ends with SNAPSHOT then choose ? ""(usethis) : ""(othersise use this)
                    def nexusRepo = readPomVersion.version.endsWith("SNAPSHOT") ? "demo-snapshot" : "demo-release"


                    nexusArtifactUploader artifacts: 
                    [
                        [
                            artifactId: 'springboot', 
                            classifier: '', file: 'target/Uber.jar', 
                            type: 'jar'
                            ]
                    ], 
                    credentialsId: 'nexus_auth', 
                    groupId: 'com.example', 
                    nexusUrl: '52.201.222.96:8081', 
                    nexusVersion: 'nexus3', protocol: 'http', 
                    repository: "${nexusRepo}", 
                    version: "${readPomVersion.version}"

                }


            }
        }
        stage("Docker Image BUILD"){

            steps{
                script{

                   sh 'docker build -t $JOB_NAME:v1.$BUILD_ID .'
                   sh 'docker image tag $JOB_NAME:v1.$BUILD_ID vaibhavpatill/$JOB_NAME:v1.$BUILD_ID'
                   sh 'docker image tag $JOB_NAME:v1.$BUILD_ID vaibhavpatill/$JOB_NAME:latest'
                }


            }
        }
    }
    stage("Docker Push"){
        steps{
            script{
                withCredentials([string(credentialsId: 'docker_pass', variable: 'docker_hub_credential')]) {

                    sh 'docker login -u vaibhavpatill -p ${docker_hub_credential}'
                    sh 'docker image push vaibhavpatill/$JOB_NAME:v1.$BUILD_ID'
                    sh 'docker image push vaibhavpatill/$JOB_NAME:latest'
    
                 }

            }


        }
    }
}